CREATE TABLE folder_share_access_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    share_id bigint REFERENCES folder_shares(id) ON DELETE CASCADE NOT NULL,
    ip_address inet NOT NULL,
    user_agent text,
    accessed_at timestamp with time zone DEFAULT now() NOT NULL,
    session_duration_seconds integer,
    files_viewed integer DEFAULT 0,
    folders_navigated integer DEFAULT 0
);

COMMENT ON TABLE folder_share_access_logs IS 'Tracks detailed access logs for shared folders including IP addresses, user agents, and usage statistics.
- share_id: References the folder share that was accessed
- ip_address: IP address of the user who accessed the share
- user_agent: Browser/client information
- accessed_at: When the access occurred
- session_duration_seconds: How long the user stayed (calculated when they leave)
- files_viewed: Number of files the user viewed/downloaded
- folders_navigated: Number of folder navigations the user made';

-- Indexes for folder_share_access_logs
CREATE INDEX folder_share_access_logs_share_id_idx ON folder_share_access_logs USING btree (share_id);
CREATE INDEX folder_share_access_logs_ip_address_idx ON folder_share_access_logs USING btree (ip_address);
CREATE INDEX folder_share_access_logs_accessed_at_idx ON folder_share_access_logs USING btree (accessed_at);

-- RLS for folder_share_access_logs
ALTER TABLE folder_share_access_logs ENABLE ROW LEVEL SECURITY;

-- Policy for selecting data - allow authenticated users to view logs for their own shares
CREATE POLICY "Users can view access logs for their own shares" ON folder_share_access_logs
AS PERMISSIVE
FOR SELECT 
TO authenticated 
USING (
    share_id IN (
        SELECT id FROM folder_shares WHERE shared_by = auth.uid()
    )
);

-- Policy for inserting data - allow anonymous access for logging
CREATE POLICY "Allow anonymous access logging" ON folder_share_access_logs
AS PERMISSIVE
FOR INSERT 
TO anon, authenticated 
WITH CHECK (true);

-- Policy for updating data - allow anonymous users to update their session data
CREATE POLICY "Allow anonymous session updates" ON folder_share_access_logs
AS PERMISSIVE
FOR UPDATE 
TO anon, authenticated 
USING (true)
WITH CHECK (true);

-- Function to log share access with IP address
CREATE OR REPLACE FUNCTION log_share_access(
    share_token_param text,
    ip_address_param inet,
    user_agent_param text DEFAULT NULL
)
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    share_id bigint;
    access_log_id bigint;
BEGIN
    -- Get the share ID from the token
    SELECT id INTO share_id
    FROM folder_shares 
    WHERE share_token = share_token_param 
    AND is_active = true 
    AND (expires_at IS NULL OR expires_at > now());
    
    IF share_id IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Insert access log
    INSERT INTO folder_share_access_logs (
        share_id,
        ip_address,
        user_agent,
        accessed_at
    ) VALUES (
        share_id,
        ip_address_param,
        user_agent_param,
        now()
    ) RETURNING id INTO access_log_id;
    
    -- Update the main share access count and last accessed time
    UPDATE folder_shares 
    SET access_count = access_count + 1,
        last_accessed_at = now()
    WHERE id = share_id;
    
    RETURN access_log_id;
END;
$$;

-- Function to update session duration when user leaves
CREATE OR REPLACE FUNCTION update_session_duration(
    access_log_id_param bigint,
    session_duration_seconds_param integer,
    files_viewed_param integer DEFAULT 0,
    folders_navigated_param integer DEFAULT 0
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    UPDATE folder_share_access_logs 
    SET session_duration_seconds = session_duration_seconds_param,
        files_viewed = files_viewed_param,
        folders_navigated = folders_navigated_param
    WHERE id = access_log_id_param;
    
    RETURN FOUND;
END;
$$;

-- Grant execute permissions
GRANT EXECUTE ON FUNCTION log_share_access(text, inet, text) TO anon, authenticated;
GRANT EXECUTE ON FUNCTION update_session_duration(bigint, integer, integer, integer) TO anon, authenticated;
